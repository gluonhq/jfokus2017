buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.javafxports:jfxmobile-plugin:1.1.0'
    }

}

plugins {
    id "com.github.hierynomus.license" version "0.13.1"
}

license {
    header = file('LICENSE')
    strictCheck true
}


apply plugin: 'org.javafxports.jfxmobile'
apply from: 'theme.gradle'

themes {
    otn
    javaone
}

repositories {
    jcenter()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    maven {
        url 'http://nexus.gluonhq.com/nexus/content/repositories/releases'
    }
    maven {
        url 'http://nexus.gluonhq.com/nexus/content/repositories/snapshots'
        credentials {
            username gluonNexusUsername
            password gluonNexusPassword
        }
    }
    maven {
        url 'http://nexus.gluonhq.com/nexus/content/repositories/gluon-oss-daily'
        credentials {
            username gluonNexusUsername
            password gluonNexusPassword
        }
    }
    maven {
        url 'http://nexus.gluonhq.com/nexus/content/repositories/gluon-private-releases'
        credentials {
            username gluonNexusUsername
            password gluonNexusPassword
        }
    }
//    flatDir {
//        dirs 'libs'
//    }
}

mainClassName = 'com.gluonhq.otn.OTNApplication'
preloaderClassName = 'com.gluonhq.otn.OTNPreloader'

// For desktop (for mobile check java.custom.properties)
applicationDefaultJvmArgs = [
        "-Djavafx.pulseLogger=false",
        "-Denable.logging=false",
        "-Dfile.encoding=UTF-8"
]

dependencies {
    compile('com.gluonhq:glisten-afterburner:1.0.0') {
        exclude group: 'com.airhacks', module: 'afterburner.mfx'
    }
    compileNoRetrolambda 'com.airhacks:afterburner.mfx:1.6.2'

    compile 'com.gluonhq:connect:1.1.0'
    compile 'com.google.zxing:core:3.2.1'
    compile 'com.gluonhq:maps:1.0.1-SNAPSHOT'
    compile 'com.gluonhq:glisten-labs:1.0.0-b6'
//    compile name: 'images'
//    compile name: 'ScenicView'
}

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }
}

// run this task to extract libCharm.a from charm-ios.jar to jniLibs before running launchIOSDevice
task extractNativeLib(type: Sync) {
    def iosNativeDir = project.file(project.jfxmobile.ios.nativeDirectory)
    if (!iosNativeDir.exists()) {
        iosNativeDir.mkdirs()
    } 

    setIncludeEmptyDirs(false)
    from {
        configurations.iosRuntime.collect { zipTree(it).matching { include 'native/**' } }
    }
    into iosNativeDir
    eachFile {details -> details.path = details.name }
}

jfxmobile {
    downConfig {
        version '3.0.0'
        plugins 'browser', 'cache', 'connectivity', 'dialer', 'display', 'lifecycle', 'local-notifications', 'settings', 'statusbar', 'storage'
    }
    android {
        manifest = 'src/android/AndroidManifest.xml'
        signingConfig {
            storeFile project.hasProperty('GLUON_APK_SIGN_KEYSTORE') ? file(GLUON_APK_SIGN_KEYSTORE) : null
            storePassword project.hasProperty('GLUON_APK_SIGN_STOREPASSWORD') ? GLUON_APK_SIGN_STOREPASSWORD : ''
            keyAlias project.hasProperty('GLUON_APK_SIGN_KEYALIAS') ? GLUON_APK_SIGN_KEYALIAS : ''
            keyPassword project.hasProperty('GLUON_APK_SIGN_KEYPASSWORD') ? GLUON_APK_SIGN_KEYPASSWORD : ''
        }
    }
    ios {
        launcherClassName = 'com.gluonhq.charm.down.notifications.CustomLauncher'
        infoPList = file('src/ios/Default-Info.plist')
        forceLinkClasses = [
                'com.gluonhq.otn.**.*',
                'com.gluonhq.**.*',
                'javax.xml.stream.*.',
                'io.datafx.**.*',
                'javax.annotations.**.*',
                'javax.inject.**.*',
                'javax.json.**.*',
                'org.glassfish.json.**.*'
        ]
    }
}
